########################################
### Задание для курса React Advanced ###
########################################

К решению необходимо приложить CSV чеклист выпоненных задач
(http://localhost:7000/checklist.html).
Решение может быть передано как ссылка на репозиторий или в формате zip.


*** ЗАДАЧА ***

Разработать приложение с 2 микро-фронтэндами:
	1.	Каталог книг с возможностью получить информацию о книге,
	    добавить книгу.
	2.	Списки рекомендованной литературы (ака плей-листы)
	    со ссылкой на (1), с возможностью добавить/удалить
	    список литературы.

Задание (1) должно использовать сагу для получения
информации с сервера, с возможностью изменить запрошенную книгу,
остановить загрузку с сервера, обработать ошибку,
если сервер недоступен.

Задание (2) должно использовать redux-observable для
получения информации с сервера, с возможностью изменить
запрошенный список литературы, остановить загрузку с сервера,
обработать ошибку, если сервер недоступен.

Задание (1) должно использовать formik для формы добавления книги.
Используйте валидацию.

Задание (2) должно использовать react-hook-form для формы
добавления списка книг. Используйте валидацию.

Также необходимо реализовать:
	1.	Тест как минимум для 1 компонента интеграционный
	    (с сервером и асинхронностью) с использованием @testing-library/react
	2.	Тест компонента с мокированием сервера
	3.	Тест компонента с мокированием работы с Redux
	4.	Тест саги
	5.	Тест для эпика
	6.	Тест для редьюсера (как минимум одного, не самого простого)
	7.	Тест для стора для всего процесса добавления/удаления/просмотра
	    книги и списка книг (используйте redux-dev-tools для генерации)
	8.	E2E тест для добавления/удаления книги (также создавайте скриншоты)
	9.	E2E тест для добавления/удаления списка книг (также создавайте скриншоты)

Фронтэнды нужно объединить в монорепо с использованием lerna
или rush (на выбор)

Дополнительным плюсом будет настройка автоматических тестов
на гитхаб через workflow и упаковка всего решения в докер.

Компоненты должны использовать хуки. Не забудьте про мемоизацию
(useCallback, useMemo, useRef).

